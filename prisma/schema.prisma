datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
model Device {
  id          Int      @id @default(autoincrement())
  type        String
  hostname    String
  credentials String @default("{}")
  config      String @default("{}") // Representation of configuration as JSON
  backups     Backup[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Backup {
  id         Int      @id @default(autoincrement())
  deviceId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String
  bytes      Int?
  device     Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model Schedule {
  id        Int       @id @default(autoincrement())
  disabled  Boolean
  cron      String
  name      String
  jobs      Job[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Destination {
  id          Int      @id @default(autoincrement())
  type        String
  details     String // Representation of configuration/credentials as JSON
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Job {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  startedAt  DateTime?
  finishedAt DateTime?
  status     String
  scheduleId Int
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}